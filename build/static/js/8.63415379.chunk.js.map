{"version":3,"sources":["experience/mobile-menu.js","experience/mobile.js","experience/desktop.js","experience/experience.js"],"names":["connect","state","experienceIds","experiences","allIds","byId","goToSlide","className","map","experienceId","key","exp","data-id","onClick","company","contractorCompany","fromMonth","fromYear","toMonth","toYear","role","isInsite","country","getButton","sliderRef","ref","SLIDER_SETTINGS","event","AppService","getClickId","idx","findIndex","el","slickGoTo","experience","mapDispatchToProps","showModal","showExperienceDetail","expId","id","MODAL_EXPERIENCE","data","icon","faUserNinja","descriptionShort","href","getExperienceCard","fadeInAnimation","keyframes","fadeIn","Content","styled","div","endLoading","loadStatus","status","loadError","error","dispatch","useDispatch","useEffect","fetchExperiences","STATUS_LOADED","doShowToast","STATUS_LOADING","STATUS_IDLE","length"],"mappings":"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","file":"static/js/8.63415379.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Slides component, shown only on mobile (under 640px browser width)\n * @returns {Object} UL DOM node\n */\nconst MobileMenu = ({ goToSlide, experienceIds, experiences }) => {\n  const getButton = experienceId => {\n    const exp = experiences[experienceId];\n\n    return (\n      <button\n        className=\"w-full text-left p-2 border rounded border-gray-300 bg-white shadow-sm\"\n        data-id={experienceId}\n        onClick={goToSlide}\n      >\n        <div className=\"flex justify-between\">\n          <div>\n            <span className=\"text-sm font-bold\">{exp.company}</span>\n            {exp.contractorCompany && (\n              <span>{` (in ${exp.contractorCompany})`}</span>\n            )}\n          </div>\n          <div>{`${exp.fromMonth} ${exp.fromYear}/${exp.toMonth} ${exp.toYear}`}</div>\n        </div>\n\n        <div className=\"role-and-country flex justify-between\">\n          <div>{exp.role}</div>\n          <div>{`${exp.isInsite ? \"Insite\" : \"Remotely\"} - ${\n            exp.country\n          }`}</div>\n        </div>\n      </button>\n    );\n  };\n\n  return (\n    <ul className=\"text-xs\">\n      {experienceIds.map(experienceId => (\n        <li key={experienceId} className=\"my-2\">\n          {getButton(experienceId)}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMobileMenu.propTypes = {\n  // Function moves slide to selected section\n  goToSlide: PropTypes.func.isRequired,\n  experienceIds: PropTypes.array.isRequired,\n  experiences: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  experienceIds: state.experiences.allIds,\n  experiences: state.experiences.byId\n});\n\nexport default connect(mapStateToProps)(MobileMenu);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Slider from \"react-slick\";\nimport PropTypes from \"prop-types\";\nimport MobileMenu from \"./mobile-menu\";\nimport Card from \"./card\";\nimport AppService from \"../app-service\";\nimport { SLIDER_SETTINGS } from \"../constants\";\n\nconst Mobile = ({ experienceIds, experiences }) => {\n  let sliderRef = null; // Reference to DOM node\n\n  /**\n   * Store reference to DOM node. Required for slide functionality.\n   * @param {Object} ref DOM node\n   */\n  const setSliderRef = ref => (sliderRef = ref);\n\n  /**\n   * Moves slide to selected section\n   * @param {Object} event - Click event\n   */\n  const goToSlide = event => {\n    const experienceId = AppService.getClickId(event);\n    const idx = experienceIds.findIndex(el => el === experienceId);\n    sliderRef.slickGoTo(idx + 1);\n  };\n\n  return (\n    <div className=\"block sm:hidden -mt-4\">\n      <Slider ref={setSliderRef} {...SLIDER_SETTINGS}>\n        <MobileMenu goToSlide={goToSlide} />\n        {experienceIds.map(experienceId => (\n          <Card key={experienceId} experience={experiences[experienceId]} />\n        ))}\n      </Slider>\n    </div>\n  );\n};\n\nMobile.propTypes = {\n  experienceIds: PropTypes.array.isRequired,\n  experiences: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  experienceIds: state.experiences.allIds,\n  experiences: state.experiences.byId\n});\n\nexport default connect(mapStateToProps)(Mobile);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserNinja } from \"@fortawesome/free-solid-svg-icons\";\nimport PropTypes from \"prop-types\";\nimport AppService from \"../app-service\";\nimport { showModal } from \"../shared/modal/ducks\";\nimport { MODAL_EXPERIENCE } from \"../constants\";\n\n/**\n * Content to show if browser is over 640px width.\n * @returns {Object} DIV DOM node.\n */\nconst Desktop = ({ showModal, experiences, experienceIds }) => {\n  /**\n   * Set experience id to Redux and show modal with experience detail.\n   * @param {Object} event - Click event\n   */\n  const showExperienceDetail = event => {\n    const expId = AppService.getClickId(event);\n    showModal({ id: MODAL_EXPERIENCE, data: `${expId}` });\n  };\n\n  const getExperienceCard = experienceId => {\n    const exp = experiences[experienceId];\n\n    return (\n      <div\n        key={exp.id}\n        className=\"w-full border rounded border-gray-400 bg-gray-100 text-left cursor-pointer relative transition-colors transition-500 shadow-lg hover:border-gray-600 hover:bg-white\"\n        data-id={exp.id}\n        onClick={showExperienceDetail}\n      >\n        <div className=\"px-2 pt-2\">\n          <div className=\"flex justify-between\">\n            <div>\n              <span className=\"text-sm md:text-md lg:text-base font-bold\">\n                {exp.company}\n              </span>\n            </div>\n            <div className=\"hidden screen960:block\">{`${\n              exp.isInsite ? \"Insite\" : \"Remotely\"\n            } - ${exp.country}`}</div>\n            <div className=\"block screen960:hidden\">{exp.country}</div>\n          </div>\n          <div className=\"flex justify-between\">\n            <div className=\"block screen960:hidden\"></div>\n            <div className=\"hidden screen960:block text-sm\">\n              {exp.contractorCompany && (\n                <span>{` (in ${exp.contractorCompany})`}</span>\n              )}\n            </div>\n            <div className=\"text-sm\">{`${exp.fromMonth} ${exp.fromYear}/${exp.toMonth} ${exp.toYear}`}</div>\n          </div>\n        </div>\n        <div className=\"border-t border-gray-300 px-2 py-1 mt-1\">\n          <FontAwesomeIcon\n            icon={faUserNinja}\n            className=\"text-1xl text-gray-500 mr-2\"\n          />\n          <span>{exp.role}</span>\n        </div>\n        <div className=\"row-description-short border-t border-gray-300 text-justify px-2 pt-1 pb-4\">\n          {exp.descriptionShort}\n        </div>\n        <a\n          href=\"/#\"\n          data-id={exp.id}\n          onClick={showExperienceDetail}\n          className=\"absolute right-0 bottom-0 mr-1 mb-1 text-xs text-red-500\"\n        >\n          more\n        </a>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"hidden sm:block\">\n      <div className=\"experience-desktop-grid text-xs screen730:text-sm lg:text-base\">\n        {experienceIds.map(experienceId => getExperienceCard(experienceId))}\n      </div>\n    </div>\n  );\n};\n\nDesktop.propTypes = {\n  experienceIds: PropTypes.array,\n  experiences: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  experienceIds: state.experiences.allIds,\n  experiences: state.experiences.byId\n});\n\nconst mapDispatchToProps = {\n  showModal\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Desktop);\n","import React, { useEffect } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport styled, { keyframes } from \"styled-components\";\nimport { fadeIn } from \"react-animations\";\nimport PropTypes from \"prop-types\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"./experience.css\";\nimport Mobile from \"./mobile\";\nimport Desktop from \"./desktop\";\nimport \"../css/background.css\";\nimport {\n  fetchExperiences,\n  STATUS_LOADING,\n  STATUS_IDLE,\n  STATUS_LOADED,\n  endLoading\n} from \"./ducks\";\nimport { doShowToast } from \"../shared/toast/ducks\";\n\n// Mount animation keyframes\nconst fadeInAnimation = keyframes`${fadeIn}`;\n\n// Styled to add animation at component mount\nconst Content = styled.div`\n  animation: 2s ${fadeInAnimation};\n`;\n\n/**\n * Experience page component.\n */\nconst Experience = ({ loadStatus, endLoading, loadError, experienceIds }) => {\n  const dispatch = useDispatch();\n\n  // Load experiences data from JSON on component mount.\n  useEffect(() => {\n    dispatch(fetchExperiences());\n    // eslint-disable-next-line\n  }, []);\n\n  // Listen changes to loadStatus\n  useEffect(() => {\n    if (loadStatus === STATUS_LOADED) {\n      if (loadError) {\n        dispatch(\n          doShowToast(\"Error loading experiences data, please reload.\", false)\n        );\n      }\n      endLoading();\n    }\n  });\n\n  switch (loadStatus) {\n    case STATUS_LOADING:\n      return (\n        <div className=\"flex h-full w-full items-center justify-center\">\n          <p className=\"text-gray-500\">Loading experiences...</p>\n        </div>\n      );\n    case STATUS_IDLE: {\n      if (experienceIds.length > 0) {\n        return (\n          <Content>\n            <Mobile />\n            <Desktop />\n          </Content>\n        );\n      }\n      return null;\n    }\n    case STATUS_LOADED:\n      return null;\n    default:\n      return null;\n  }\n};\n\nExperience.propTypes = {\n  loadStatus: PropTypes.string,\n  loadError: PropTypes.string,\n  experienceIds: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  loadStatus: state.experiences.status,\n  loadError: state.experiences.error,\n  experienceIds: state.experiences.allIds\n});\n\nconst mapDispatchToProps = {\n  endLoading\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Experience);\n"],"sourceRoot":""}