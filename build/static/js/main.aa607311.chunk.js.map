{"version":3,"sources":["components/loader/loader.js","redux/store.js","index.js","redux/actions.js"],"names":["Loader","props","className","forButton","defaultProps","React","memo","appReducer","createReducer","actions","state","payload","modalId","modalData","experiences","initRoute","screenWidth","width","screenHeight","height","store","createStore","composeWithDevTools","assignAll","App","lazy","ReactDOM","render","fallback","document","getElementById","showModal","createAction","hideModal","setExperiences","setFlagInitRoute","setScreenSize"],"mappings":"+GAAA,oBAIMA,GAJN,MAIe,SAAAC,GAAK,OAClB,yBACEC,UAAS,kDACPD,EAAME,UAAY,GAAK,SAGzB,yBAAKD,UAAS,uBAAkBD,EAAME,UAAY,YAAc,KAC9D,8BACA,8BACA,8BACA,kCASNH,EAAOI,aAAe,CACpBD,WAAW,GAGEE,QAAMC,KAAKN,I,gwBCtB1B,IASMO,EAAaC,yBAAa,mBAE3BC,aAAoB,SAACC,EAAOC,GAAR,YAChBD,EADgB,CAEnBE,QAASD,EAAQC,QACjBC,UAAWF,EAAQE,WAAa,UALN,cAO3BJ,aAAoB,SAACC,EAAOC,GAAR,YAChBD,EADgB,CAEnBE,QAAS,KACTC,UAAW,UAVe,cAY3BJ,kBAAyB,SAACC,EAAOC,GAAR,YACrBD,EADqB,CAExBI,YAAaH,OAda,cAgB3BF,oBAA2B,SAACC,EAAOC,GAAR,YACvBD,EADuB,CAE1BK,WAAW,OAlBe,cAoB3BN,iBAAwB,SAACC,EAAOC,GAAR,YACpBD,EADoB,CAEvBM,YAAaL,EAAQM,MACrBC,aAAcP,EAAQQ,YAvBI,GATd,CAChBP,QAAS,KACTC,UAAW,KACXC,YAAa,KACbC,WAAW,EACXC,YAAa,EACbE,aAAc,IAgCVE,EAAQC,sBAAYd,EAAYe,iCAEtCC,oBAAUd,EAASW,GAEJA,Q,QCxCTI,G,MAAMnB,IAAMoB,MAAK,kBAAM,wDAE7BC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,WAAD,CACEQ,SACE,yBAAK1B,UAAU,sDACb,kBAAC,IAAD,CAAQA,UAAU,8BAItB,kBAACsB,EAAD,QAGJK,SAASC,eAAe,U,+BCrB1B,oPAKaC,EAAYC,uBACvB,uCACA,SAACpB,EAASC,GAAV,MAAyB,CAAED,UAASC,gBAKzBoB,EAAYD,uBAAa,kCAIzBE,EAAiBF,uBAAa,0BAI9BG,EAAmBH,uBAAa,+BAKhCI,EAAgBJ,uBAAa,sC","file":"static/js/main.aa607311.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./loader.css\";\n\nconst Loader = props => (\n  <div\n    className={`flex items-center justify-center w-full ${\n      props.forButton ? \"\" : \"h-40\"\n    }`}\n  >\n    <div className={`lds-ellipsis ${props.forButton ? \"forButton\" : \"\"}`}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n);\n\nLoader.propTypes = {\n  forButton: PropTypes.bool\n};\n\nLoader.defaultProps = {\n  forButton: false\n};\n\nexport default React.memo(Loader);\n","import { createStore } from \"redux\";\nimport { assignAll, createReducer } from \"redux-act\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\nimport * as actions from \"./actions\";\n\nconst initState = {\n  modalId: null,\n  modalData: null,\n  experiences: null,\n  initRoute: false,\n  screenWidth: 0,\n  screenHeight: 0\n};\n\nconst appReducer = createReducer(\n  {\n    [actions.showModal]: (state, payload) => ({\n      ...state,\n      modalId: payload.modalId,\n      modalData: payload.modalData || null\n    }),\n    [actions.hideModal]: (state, payload) => ({\n      ...state,\n      modalId: null,\n      modalData: null\n    }),\n    [actions.setExperiences]: (state, payload) => ({\n      ...state,\n      experiences: payload\n    }),\n    [actions.setFlagInitRoute]: (state, payload) => ({\n      ...state,\n      initRoute: true\n    }),\n    [actions.setScreenSize]: (state, payload) => ({\n      ...state,\n      screenWidth: payload.width,\n      screenHeight: payload.height\n    })\n  },\n  initState\n);\n\nconst store = createStore(appReducer, composeWithDevTools());\n\nassignAll(actions, store);\n\nexport default store;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport Loader from \"./components/loader/loader\";\nimport \"./css/index.css\";\n\nconst App = React.lazy(() => import(\"./App\"));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Suspense\n      fallback={\n        <div className=\"flex flex-col items-center justify-center h-screen\">\n          <Loader className=\"text-gray-500 h-16 w-16\" />\n        </div>\n      }\n    >\n      <App />\n    </Suspense>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createAction } from \"redux-act\";\n\n/**\n * Show modal\n */\nexport const showModal = createAction(\n  \"Set modal id and data to open modal\",\n  (modalId, modalData) => ({ modalId, modalData })\n);\n/**\n * Hide modal\n */\nexport const hideModal = createAction(\"Delete modal id to close modal\");\n/**\n * Store experiences loaded from JSON to redux\n */\nexport const setExperiences = createAction(\"Sets experiences array\");\n/**\n * Store flag, used to move scroll when SPA is mounted\n */\nexport const setFlagInitRoute = createAction(\"Sets flag for initial route\");\n\n/**\n * Store browser screen width, height\n */\nexport const setScreenSize = createAction(\"Set browser screen width, height\");\n"],"sourceRoot":""}