{"version":3,"sources":["constants.js","shared/modal/ducks/index.js","shared/toast/ducks/index.js","shared/loader/loader.js","app/ducks/index.js","experience/ducks/index.js","store.js","index.js"],"names":["PAGE_HOME","PAGE_ABOUT","PAGE_SKILLS","PAGE_EXPERIENCE","PAGE_CONTACT","PAGES","id","route","label","MODAL_CLOSE_TIME","MODAL_HEADER_MENU","MODAL_EXPERIENCE","TOAST_EXP_TIME","MAIL_URL","GOOGLE_ANALYTICS_KEY","CONTACT_INIT_STATE","name","email","message","SKILLS_SECTIONS","SLIDER_SETTINGS","arrows","dots","infinite","slidesToScroll","slidesToShow","speed","modalSlice","createSlice","initialState","modalId","modalData","reducers","showModal","state","action","payload","data","hideModal","actions","toastSlice","isSuccess","fade","hideToast","fadeToast","showToast","doShowToast","dispatch","a","setTimeout","Loader","forButton","className","defaultProps","React","memo","appSlice","initRoute","setFlagInitRoute","STATUS_IDLE","STATUS_LOADING","STATUS_LOADED","experiencesSlice","allIds","byId","status","error","startLoading","endLoading","storeError","storeExperiences","fetchExperiences","Axios","get","response","console","log","rootReducer","combineReducers","app","modal","experiences","toast","store","configureStore","reducer","AppLazyLoader","lazy","ReactDOM","render","Suspense","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.815448db.chunk.js","sourcesContent":["/**\n * Constants used in the whole app. This is used as a configuration file\n * for the App.\n */\nexport const PAGE_HOME = \"PAGE_HOME\"; // Home page id\nexport const PAGE_ABOUT = \"PAGE_ABOUT\"; // About page id\nexport const PAGE_SKILLS = \"PAGE_SKILLS\"; // Skills page id\nexport const PAGE_EXPERIENCE = \"PAGE_EXPERIENCE\"; // Experience page id\nexport const PAGE_CONTACT = \"PAGE_CONTACT\"; // Contact page id\n// All pages, used for routing and navbar\nexport const PAGES = [\n  { id: PAGE_HOME, route: \"/home\", label: \"Home\" },\n  { id: PAGE_ABOUT, route: \"/about\", label: \"About\" },\n  { id: PAGE_SKILLS, route: \"/skills\", label: \"Skills\" },\n  { id: PAGE_EXPERIENCE, route: \"/experience\", label: \"Experience\" },\n  { id: PAGE_CONTACT, route: \"/contact\", label: \"Contact\" }\n];\n\n// Delay before closing modal. Used for fade out animation.\nexport const MODAL_CLOSE_TIME = 600;\n// Mobile menu modal id\nexport const MODAL_HEADER_MENU = \"MODAL_HEADER_MENU\";\n// Modal id to show a selected experience card.\nexport const MODAL_EXPERIENCE = \"MODAL_EXPERIENCE\";\n// Time in ms to close toast message automatically\nexport const TOAST_EXP_TIME = \"3000\";\n// Url for mail endpoint. In development environment uses mockserver to fake\n// mail flow.\nexport const MAIL_URL = \"/mail\";\nexport const GOOGLE_ANALYTICS_KEY =\n  process.env.NODE_ENV === \"development\" ? \"\" : \"UA-152898995-1\";\n// Contact page form initial field values\nexport const CONTACT_INIT_STATE = {\n  name: \"\",\n  email: \"\",\n  message: \"\"\n};\n// Skills page: sections list.\nexport const SKILLS_SECTIONS = [\"advanced\", \"intermediate\", \"novice\"];\n\nexport const SLIDER_SETTINGS = {\n  arrows: false,\n  dots: true,\n  infinite: true,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst modalSlice = createSlice({\n  name: \"modal\",\n  initialState: {\n    // Can contain any string id define as MODAL_* in constants.js\n    // Null will hide modal.\n    modalId: null,\n    // Any additional data. Currently used to store experience id if modal is loaded from Experiences desktop.js\n    modalData: null\n  },\n  reducers: {\n    /**\n     * Set modal id and data to open modal\n     * @param {Object} state - Current state\n     * @param {Object} action - {payload}\n     */\n    showModal(state, action) {\n      const { id, data = null } = action.payload;\n      state.modalId = id;\n      state.modalData = data;\n    },\n    /**\n     * Delete modal id to close modal\n     * @param {Object} state  - Current state\n     */\n    hideModal(state) {\n      state.modalId = null;\n      state.modalData = null;\n    }\n  }\n});\n\nexport const { showModal, hideModal } = modalSlice.actions;\n\nexport default modalSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { TOAST_EXP_TIME } from \"../../../constants\";\n\nconst toastSlice = createSlice({\n  name: \"toast\",\n  initialState: {\n    // If \"\" toast is hidden.\n    message: \"\",\n    // Bg color blue if TRUE, otherwise is error, bg is red.\n    isSuccess: false,\n    // Flag to fade toast before hiding it.\n    fade: false\n  },\n  reducers: {\n    // Resets all and hides toast\n    hideToast(state, action) {\n      state.message = \"\";\n      state.isSuccess = false;\n      state.fade = false;\n    },\n    // IF there is message sets 'fade' to TRUE to trigger fading animation.\n    fadeToast(state, action) {\n      if (state.message !== \"\") {\n        state.fade = true;\n      }\n    },\n    showToast(state, action) {\n      const { message, isSuccess } = action.payload;\n      state.message = message;\n      state.isSuccess = isSuccess;\n      state.fade = false;\n    }\n  }\n});\n\nexport const { hideToast, fadeToast, showToast } = toastSlice.actions;\n\nexport const doFadeToast = () => async dispatch => {\n  dispatch(fadeToast());\n  setTimeout(() => {\n    dispatch(hideToast());\n  }, 600);\n};\n\nexport const doShowToast = (message, isSuccess) => async dispatch => {\n  dispatch(showToast({ message, isSuccess }));\n  setTimeout(() => {\n    dispatch(doFadeToast());\n  }, TOAST_EXP_TIME);\n};\n\nexport default toastSlice.reducer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./loader.css\";\n/**\n * Loader component. Can also be shown inside buttons.\n */\nconst Loader = ({ forButton }) => (\n  <div\n    className={`flex items-center justify-center w-full ${\n      forButton ? \"\" : \"h-40\"\n    }`}\n  >\n    <div className={`lds-ellipsis ${forButton ? \"forButton\" : \"\"}`}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n);\n\nLoader.propTypes = {\n  // if TRUE render small version to show inside button\n  forButton: PropTypes.bool\n};\n\nLoader.defaultProps = {\n  forButton: false //By default show big version\n};\n\nexport default React.memo(Loader);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState: {\n    // flag to scroll to url defined on url on SPA initial load\n    initRoute: false\n  },\n  reducers: {\n    /**\n     * Sets flag to TRUE to scroll automatically to route in url only once.\n     */\n    setFlagInitRoute(state, action) {\n      state.initRoute = true;\n    }\n  }\n});\n\nexport const { setFlagInitRoute } = appSlice.actions;\n\nexport default appSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport Axios from \"axios\";\n\n// Valid status values\n// show experiences list\nexport const STATUS_IDLE = \"status_idle\";\n// hide content, show loader\nexport const STATUS_LOADING = \"status_loading\";\n// fetch experiences completed, data loaded or error detected\nexport const STATUS_LOADED = \"status_loaded\";\n\nconst experiencesSlice = createSlice({\n  name: \"experiences\",\n  initialState: {\n    allIds: [],\n    byId: {},\n    status: STATUS_LOADING,\n    error: \"\"\n  },\n  reducers: {\n    startLoading(state, action) {\n      state.status = STATUS_LOADING;\n      state.error = \"\";\n    },\n    endLoading(state, action) {\n      state.status = STATUS_IDLE;\n      state.error = \"\";\n    },\n    storeError(state, action) {\n      const { error = \"Unknown error\" } = action.payload;\n      state.status = STATUS_LOADED;\n      state.allIds = [];\n      state.byId = {};\n      state.error = error;\n    },\n    storeExperiences(state, action) {\n      const { allIds = [], byId = {} } = action.payload;\n      state.status = STATUS_LOADED;\n      state.allIds = allIds;\n      state.byId = byId;\n      state.error = \"\";\n    }\n  }\n});\n\nexport const {\n  startLoading,\n  endLoading,\n  storeError,\n  storeExperiences\n} = experiencesSlice.actions;\n\n// Async functions\n\nexport const fetchExperiences = () => async dispatch => {\n  dispatch(startLoading());\n  try {\n    const response = await Axios.get(\"/experiences\");\n    dispatch(storeExperiences(response.data));\n  } catch (error) {\n    console.log(`fetchExperiences() error:`, error);\n    dispatch(storeError(error.message));\n  }\n};\n\nexport default experiencesSlice.reducer;\n","/**\n * Manages Redux storage\n */\nimport { combineReducers } from \"redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\n\n// All reducers\nimport app from \"./app/ducks\";\nimport modal from \"./shared/modal/ducks\";\nimport experiences from \"./experience/ducks\";\nimport toast from \"./shared/toast/ducks\";\n\n// Combine all storage in a single object\nconst rootReducer = combineReducers({\n  app,\n  modal,\n  experiences,\n  toast\n});\n\n// Redux dev tools only available on dev environment\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n","/**\n * Initial file for the SPA. Renders the React app inside the \"#root\" DOM node,\n * links Redux store and lazily loads the main App component.\n */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./css/index.css\";\nimport Loader from \"./shared/loader/loader\";\n\n/**\n * Component that will load App component lazily.\n */\nconst AppLazyLoader = React.lazy(() => import(\"./app/app\"));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.Suspense\n      fallback={\n        <div className=\"flex flex-col items-center justify-center h-screen\">\n          <Loader className=\"text-gray-500 h-16 w-16\" />\n        </div>\n      }\n    >\n      <AppLazyLoader />\n    </React.Suspense>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}