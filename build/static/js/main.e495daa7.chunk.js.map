{"version":3,"sources":["redux/misc.actions.js","constants.js","shared/loader/loader.js","redux/misc.reducer.js","redux/modal.reducer.js","redux/toast.reducer.js","redux/store.js","index.js","redux/toast.actions.js","redux/modal.actions.js"],"names":["setExperiences","createAction","setFlagInitRoute","PAGE_HOME","PAGE_ABOUT","PAGE_SKILLS","PAGE_EXPERIENCE","PAGE_CONTACT","MODAL_CLOSE_TIME","MODAL_HEADER_MENU","MODAL_EXPERIENCE","TOAST_EXP_TIME","MAIL_URL","Loader","props","className","forButton","defaultProps","React","memo","actionHandlers","actions","state","payload","experiences","initRoute","misc","createReducer","modalId","modalData","modal","message","isSuccess","fade","setTimeout","toast","rootReducer","combineReducers","store","createStore","composeWithDevTools","assignAll","miscActions","modalActions","toastActions","App","lazy","ReactDOM","render","fallback","document","getElementById","hideToast","fadeToast","showToast","showModal","hideModal"],"mappings":"+GAAA,kHAKaA,EAAiBC,uBAAa,0BAI9BC,EAAmBD,uBAAa,gC,gCCT7C,oVAAO,IAAME,EAAY,YACZC,EAAa,aACbC,EAAc,cACdC,EAAkB,kBAClBC,EAAe,eAEfC,EAAmB,IACnBC,EAAoB,oBACpBC,EAAmB,mBAEnBC,EAAiB,OACjBC,EAGP,a,gCCdN,oBAIMC,GAJN,MAIe,SAAAC,GAAK,OAClB,yBACEC,UAAS,kDACPD,EAAME,UAAY,GAAK,SAGzB,yBAAKD,UAAS,uBAAkBD,EAAME,UAAY,YAAc,KAC9D,8BACA,8BACA,8BACA,kCASNH,EAAOI,aAAe,CACpBD,WAAW,GAGEE,QAAMC,KAAKN,I,gxBCxB1B,I,EAKMO,GAAc,mBACjBC,kBAAyB,SAACC,EAAOC,GAAR,YACrBD,EADqB,CAExBE,YAAaD,OAHG,cAKjBF,oBAA2B,SAACC,EAAOC,GAAR,YACvBD,EADuB,CAE1BG,WAAW,OAPK,GAaLC,EAFFC,wBAAcP,EAhBT,CAChBI,YAAa,KACbC,WAAW,I,yjBCFb,I,EAKML,GAAc,mBACjBC,aAAoB,SAACC,EAAOC,GAAR,YAChBD,EADgB,CAEnBM,QAASL,EAAQK,QACjBC,UAAWN,EAAQM,WAAa,UAJhB,cAMjBR,aAAoB,SAACC,EAAOC,GAAR,YAChBD,EADgB,CAEnBM,QAAS,KACTC,UAAW,UATK,GAeLC,EAFDH,wBAAcP,EAlBV,CAChBQ,QAAS,KACTC,UAAW,O,ikBCDb,IAMMT,GAAc,mBACjBC,aAAoB,SAAAC,GAAK,YACrBA,EADqB,CAExBS,QAAS,GACTC,WAAW,EACXC,MAAM,OALU,cAOjBZ,aAAoB,SAAAC,GACnB,MAAsB,KAAlBA,EAAMS,SAERG,WAAWb,YAAmB,KACvB,KACFC,EADL,CAEEW,MAAM,KAGHX,KAhBS,cAkBjBD,aAAoB,SAACC,EAAOC,GAG3B,OADAW,WAAWb,YAAmBV,KACvB,KACFW,EADL,CAEES,QAASR,EAAQQ,QACjBC,UAAWT,EAAQS,UACnBC,MAAM,OAzBQ,GAgCLE,EAFDR,wBAAcP,EApCV,CAChBW,QAAS,GACTC,WAAW,EACXC,MAAM,ICOFG,EAAcC,0BAAgB,CAClCX,OACAI,QACAK,UAGIG,EAAQC,sBAAYH,EAAaI,iCAEvCC,oBAAUC,EAAaJ,GACvBG,oBAAUE,EAAcL,GACxBG,oBAAUG,EAAcN,GAETA,Q,QCnBTO,G,MAAM3B,IAAM4B,MAAK,kBAAM,wDAE7BC,IAASC,OACP,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,WAAD,CACEW,SACE,yBAAKlC,UAAU,sDACb,kBAAC,IAAD,CAAQA,UAAU,8BAItB,kBAAC8B,EAAD,QAGJK,SAASC,eAAe,U,+BCrB1B,gJAKaC,EAAYnD,uBAAa,oBAIzBoD,EAAYpD,uBAAa,0CAIzBqD,EAAYrD,uBACvB,oBACA,SAAC8B,EAASC,GAAV,MAAyB,CAAED,UAASC,iB,+BCftC,sGAKauB,EAAYtD,uBACvB,uCACA,SAAC2B,EAASC,GAAV,MAAyB,CAAED,UAASC,gBAKzB2B,EAAYvD,uBAAa,oC","file":"static/js/main.e495daa7.chunk.js","sourcesContent":["import { createAction } from \"redux-act\";\n\n/**\n * Store experiences loaded from JSON to redux\n */\nexport const setExperiences = createAction(\"Sets experiences array\");\n/**\n * Store flag, used to move scroll when SPA is mounted\n */\nexport const setFlagInitRoute = createAction(\"Sets flag for initial route\");\n","export const PAGE_HOME = \"PAGE_HOME\";\nexport const PAGE_ABOUT = \"PAGE_ABOUT\";\nexport const PAGE_SKILLS = \"PAGE_SKILLS\";\nexport const PAGE_EXPERIENCE = \"PAGE_EXPERIENCE\";\nexport const PAGE_CONTACT = \"PAGE_CONTACT\";\n\nexport const MODAL_CLOSE_TIME = 600;\nexport const MODAL_HEADER_MENU = \"MODAL_HEADER_MENU\";\nexport const MODAL_EXPERIENCE = \"MODAL_EXPERIENCE\";\n\nexport const TOAST_EXP_TIME = \"3000\";\nexport const MAIL_URL =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8081/mail.php\"\n    : \"/mail.php\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./loader.css\";\n\nconst Loader = props => (\n  <div\n    className={`flex items-center justify-center w-full ${\n      props.forButton ? \"\" : \"h-40\"\n    }`}\n  >\n    <div className={`lds-ellipsis ${props.forButton ? \"forButton\" : \"\"}`}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n);\n\nLoader.propTypes = {\n  forButton: PropTypes.bool\n};\n\nLoader.defaultProps = {\n  forButton: false\n};\n\nexport default React.memo(Loader);\n","import { createReducer } from \"redux-act\";\nimport * as actions from \"./misc.actions\";\n\nconst initState = {\n  experiences: null,\n  initRoute: false\n};\n\nconst actionHandlers = {\n  [actions.setExperiences]: (state, payload) => ({\n    ...state,\n    experiences: payload\n  }),\n  [actions.setFlagInitRoute]: (state, payload) => ({\n    ...state,\n    initRoute: true\n  })\n};\n\nconst misc = createReducer(actionHandlers, initState);\n\nexport default misc;\n","import { createReducer } from \"redux-act\";\nimport * as actions from \"./modal.actions\";\n\nconst initState = {\n  modalId: null,\n  modalData: null\n};\n\nconst actionHandlers = {\n  [actions.showModal]: (state, payload) => ({\n    ...state,\n    modalId: payload.modalId,\n    modalData: payload.modalData || null\n  }),\n  [actions.hideModal]: (state, payload) => ({\n    ...state,\n    modalId: null,\n    modalData: null\n  })\n};\n\nconst modal = createReducer(actionHandlers, initState);\n\nexport default modal;\n","import { createReducer } from \"redux-act\";\nimport * as actions from \"./toast.actions\";\nimport { TOAST_EXP_TIME } from \"../constants\";\n\nconst initState = {\n  message: \"\",\n  isSuccess: false,\n  fade: false\n};\n\nconst actionHandlers = {\n  [actions.hideToast]: state => ({\n    ...state,\n    message: \"\",\n    isSuccess: false,\n    fade: false\n  }),\n  [actions.fadeToast]: state => {\n    if (state.message !== \"\") {\n      // Toast message will fade now, reset in 600ms\n      setTimeout(actions.hideToast, 600);\n      return {\n        ...state,\n        fade: true\n      };\n    }\n    return state;\n  },\n  [actions.showToast]: (state, payload) => {\n    // Toast message disappears automatically after TOAST_EXP_TIME ms\n    setTimeout(actions.fadeToast, TOAST_EXP_TIME);\n    return {\n      ...state,\n      message: payload.message,\n      isSuccess: payload.isSuccess,\n      fade: false\n    };\n  }\n};\n\nconst toast = createReducer(actionHandlers, initState);\n\nexport default toast;\n","import { assignAll } from \"redux-act\";\nimport { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\n\n// All actions\nimport * as miscActions from \"./misc.actions\";\nimport * as modalActions from \"./modal.actions\";\nimport * as toastActions from \"./toast.actions\";\n\n// All reducers\nimport misc from \"./misc.reducer\";\nimport modal from \"./modal.reducer\";\nimport toast from \"./toast.reducer\";\n\nconst rootReducer = combineReducers({\n  misc,\n  modal,\n  toast\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nassignAll(miscActions, store);\nassignAll(modalActions, store);\nassignAll(toastActions, store);\n\nexport default store;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport Loader from \"./shared/loader/loader\";\nimport \"./css/index.css\";\n\nconst App = React.lazy(() => import(\"./app/app\"));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Suspense\n      fallback={\n        <div className=\"flex flex-col items-center justify-center h-screen\">\n          <Loader className=\"text-gray-500 h-16 w-16\" />\n        </div>\n      }\n    >\n      <App />\n    </Suspense>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createAction } from \"redux-act\";\n\n/**\n * Hides toast alert\n */\nexport const hideToast = createAction(\"Hide toast alert\");\n/**\n * Fades toast alert\n */\nexport const fadeToast = createAction(\"Fade toast alert, will reset in 600 ms\");\n/**\n * Shows toast alert\n */\nexport const showToast = createAction(\n  \"Show toast alert\",\n  (message, isSuccess) => ({ message, isSuccess })\n);\n","import { createAction } from \"redux-act\";\n\n/**\n * Show modal\n */\nexport const showModal = createAction(\n  \"Set modal id and data to open modal\",\n  (modalId, modalData) => ({ modalId, modalData })\n);\n/**\n * Hide modal\n */\nexport const hideModal = createAction(\"Delete modal id to close modal\");\n"],"sourceRoot":""}