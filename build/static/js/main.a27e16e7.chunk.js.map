{"version":3,"sources":["redux/misc.actions.js","constants.js","shared/loader/loader.js","redux/misc.reducer.js","redux/modal.reducer.js","redux/toast.reducer.js","redux/store.js","index.js","redux/toast.actions.js","redux/modal.actions.js"],"names":["setExperiences","createAction","setFlagInitRoute","PAGE_HOME","PAGE_ABOUT","PAGE_SKILLS","PAGE_EXPERIENCE","PAGE_CONTACT","PAGES","id","route","label","MODAL_CLOSE_TIME","MODAL_HEADER_MENU","MODAL_EXPERIENCE","TOAST_EXP_TIME","MAIL_URL","GOOGLE_ANALYTICS_KEY","CONTACT_INIT_STATE","name","email","message","SKILLS_SECTIONS","SLIDER_SETTINGS","arrows","dots","infinite","slidesToScroll","slidesToShow","speed","Loader","props","className","forButton","defaultProps","React","memo","actionHandlers","actions","state","payload","experiences","initRoute","misc","createReducer","modalId","modalData","modal","isSuccess","fade","setTimeout","toast","rootReducer","combineReducers","store","createStore","composeWithDevTools","assignAll","miscActions","modalActions","toastActions","AppLazyLoader","lazy","ReactDOM","render","Suspense","fallback","document","getElementById","hideToast","fadeToast","showToast","showModal","hideModal"],"mappings":"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","file":"static/js/main.a27e16e7.chunk.js","sourcesContent":["import { createAction } from \"redux-act\";\n\n/**\n * Store experiences loaded from JSON to redux\n */\nexport const setExperiences = createAction(\"Sets experiences array\");\n/**\n * Store flag, used to move scroll when SPA is initially mounted\n */\nexport const setFlagInitRoute = createAction(\"Sets flag for initial route\");\n","/**\n * Constants used in the whole app. This is used as a configuration file\n * for the App.\n */\nexport const PAGE_HOME = \"PAGE_HOME\"; // Home page id\nexport const PAGE_ABOUT = \"PAGE_ABOUT\"; // About page id\nexport const PAGE_SKILLS = \"PAGE_SKILLS\"; // Skills page id\nexport const PAGE_EXPERIENCE = \"PAGE_EXPERIENCE\"; // Experience page id\nexport const PAGE_CONTACT = \"PAGE_CONTACT\"; // Contact page id\n// All pages, used for routing and navbar\nexport const PAGES = [\n  { id: PAGE_HOME, route: \"/home\", label: \"Home\" },\n  { id: PAGE_ABOUT, route: \"/about\", label: \"About\" },\n  { id: PAGE_SKILLS, route: \"/skills\", label: \"Skills\" },\n  { id: PAGE_EXPERIENCE, route: \"/experience\", label: \"Experience\" },\n  { id: PAGE_CONTACT, route: \"/contact\", label: \"Contact\" }\n];\n\n// Delay before closing modal. Used for fade out animation.\nexport const MODAL_CLOSE_TIME = 600;\n// Mobile menu modal id\nexport const MODAL_HEADER_MENU = \"MODAL_HEADER_MENU\";\n// Modal id to show a selected experience card.\nexport const MODAL_EXPERIENCE = \"MODAL_EXPERIENCE\";\n// Time in ms to close toast message automatically\nexport const TOAST_EXP_TIME = \"3000\";\n// Url for mail endpoint. In development environment uses mockserver to fake\n// mail flow.\nexport const MAIL_URL =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8081/mail.php\"\n    : \"/mail.php\";\nexport const GOOGLE_ANALYTICS_KEY =\n  process.env.NODE_ENV === \"development\" ? \"\" : \"UA-152898995-1\";\n// Contact page form initial field values\nexport const CONTACT_INIT_STATE = {\n  name: \"\",\n  email: \"\",\n  message: \"\"\n};\n// Skills page: sections list.\nexport const SKILLS_SECTIONS = [\"advanced\", \"intermediate\", \"novice\"];\n\nexport const SLIDER_SETTINGS = {\n  arrows: false,\n  dots: true,\n  infinite: true,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./loader.css\";\n/**\n * Loader component. Can also be shown inside buttons.\n * @param {Object} props - Props\n */\nconst Loader = props => (\n  <div\n    className={`flex items-center justify-center w-full ${\n      props.forButton ? \"\" : \"h-40\"\n    }`}\n  >\n    <div className={`lds-ellipsis ${props.forButton ? \"forButton\" : \"\"}`}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n);\n\nLoader.propTypes = {\n  // if TRUE render small version to show inside button\n  forButton: PropTypes.bool\n};\n\nLoader.defaultProps = {\n  forButton: false //By default show big version\n};\n\nexport default React.memo(Loader);\n","import { createReducer } from \"redux-act\";\nimport * as actions from \"./misc.actions\";\n\nconst initState = {\n  experiences: null, // experiences array\n  // flag to scroll to url defined on url on SPA initial load\n  initRoute: false\n};\n\nconst actionHandlers = {\n  /**\n   * Store experiences\n   * @param {Array} payload - Experiences array from JSON\n   */\n  [actions.setExperiences]: (state, payload) => ({\n    ...state,\n    experiences: payload\n  }),\n  /**\n   * Sets flag to TRUE to scroll automatically to route in url only once.\n   */\n  [actions.setFlagInitRoute]: state => ({\n    ...state,\n    initRoute: true\n  })\n};\n\n//Create reducer, data will be available in state.misc\nconst misc = createReducer(actionHandlers, initState);\n\nexport default misc;\n","import { createReducer } from \"redux-act\";\nimport * as actions from \"./modal.actions\";\n\n/**\n * Initial state\n */\nconst initState = {\n  // Can contain any string id define as MODAL_* in constants.js\n  // Null will hide modal.\n  modalId: null,\n  // Any additional data. Currently used to store experience id if modal is loaded from Experiences desktop.js\n  modalData: null\n};\n\nconst actionHandlers = {\n  /**\n   * Store id and optional data to show modal.\n   * @param {Object} - {modalId, modalData}\n   */\n  [actions.showModal]: (state, payload) => ({\n    ...state,\n    modalId: payload.modalId,\n    modalData: payload.modalData || null\n  }),\n  // reset all to hide modal\n  [actions.hideModal]: state => ({\n    ...state,\n    modalId: null,\n    modalData: null\n  })\n};\n\n// Data will be avialable in state.modal\nconst modal = createReducer(actionHandlers, initState);\n\nexport default modal;\n","import { createReducer } from \"redux-act\";\nimport * as actions from \"./toast.actions\";\nimport { TOAST_EXP_TIME } from \"../constants\";\n\n/**\n * Initial state\n */\nconst initState = {\n  // If \"\" toast is hidden.\n  message: \"\",\n  // Bg color blue if TRUE, otherwise is error, bg is red.\n  isSuccess: false,\n  // Flag to fade toast before hiding it.\n  fade: false\n};\n\nconst actionHandlers = {\n  // Resets all and hides toast\n  [actions.hideToast]: state => ({\n    ...state,\n    message: \"\",\n    isSuccess: false,\n    fade: false\n  }),\n  // set 'fade' to TRUE to trigger fading animation. After 600ms\n  // executes hideToast to reset all and hide toast.\n  [actions.fadeToast]: state => {\n    if (state.message !== \"\") {\n      // Toast message will fade now, reset in 600ms\n      setTimeout(actions.hideToast, 600);\n      return {\n        ...state,\n        fade: true\n      };\n    }\n    return state;\n  },\n  /**\n   * Set message to show toast. After TOAST_EXP_TIME will start flow to fade, then hide toast.\n   * @param {payload} - {message, isSuccess}\n   */\n  [actions.showToast]: (state, payload) => {\n    // Toast message disappears automatically after TOAST_EXP_TIME ms\n    setTimeout(actions.fadeToast, TOAST_EXP_TIME);\n    return {\n      ...state,\n      message: payload.message,\n      isSuccess: payload.isSuccess,\n      fade: false\n    };\n  }\n};\n\n// Data is available in state.toast\nconst toast = createReducer(actionHandlers, initState);\n\nexport default toast;\n","/**\n * Manages Redux storage\n */\nimport { assignAll } from \"redux-act\";\nimport { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\n\n// All actions\nimport * as miscActions from \"./misc.actions\";\nimport * as modalActions from \"./modal.actions\";\nimport * as toastActions from \"./toast.actions\";\n\n// All reducers\nimport misc from \"./misc.reducer\";\nimport modal from \"./modal.reducer\";\nimport toast from \"./toast.reducer\";\n\n// Combine all storage in a single object\nconst rootReducer = combineReducers({\n  misc,\n  modal,\n  toast\n});\n\n// Redux dev tools only available on dev environment\nconst store = createStore(rootReducer, composeWithDevTools());\n\n// Assign all actions to store\nassignAll(miscActions, store);\nassignAll(modalActions, store);\nassignAll(toastActions, store);\n\nexport default store;\n","/**\n * Initial file for the SPA. Renders the React app inside the \"#root\" DOM node,\n * links Redux store and lazily loads the main App component.\n */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./css/index.css\";\nimport Loader from \"./shared/loader/loader\";\n\n/**\n * Component that will load App component lazily.\n */\nconst AppLazyLoader = React.lazy(() => import(\"./app/app\"));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.Suspense\n      fallback={\n        <div className=\"flex flex-col items-center justify-center h-screen\">\n          <Loader className=\"text-gray-500 h-16 w-16\" />\n        </div>\n      }\n    >\n      <AppLazyLoader />\n    </React.Suspense>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createAction } from \"redux-act\";\n\n/**\n * Hides toast alert\n */\nexport const hideToast = createAction(\"Hide toast alert\");\n/**\n * Fades toast alert\n */\nexport const fadeToast = createAction(\"Fade toast alert, will reset in 600 ms\");\n/**\n * Shows toast alert\n */\nexport const showToast = createAction(\n  \"Show toast alert\",\n  (message, isSuccess) => ({ message, isSuccess })\n);\n","import { createAction } from \"redux-act\";\n\n/**\n * Show modal\n */\nexport const showModal = createAction(\n  \"Set modal id and data to open modal\",\n  (modalId, modalData) => ({ modalId, modalData })\n);\n/**\n * Hide modal\n */\nexport const hideModal = createAction(\"Delete modal id to close modal\");\n"],"sourceRoot":""}