{"version":3,"sources":["redux/async-actions.js","shared/button.js","contact/contact.js"],"names":["loadExperiences","a","jsonPath","Axios","get","response","setExperiences","data","console","log","showToast","sendMail","values","post","MAIL_URL","Button","props","type","disabled","className","classes","inverse","push","join","getMyClasses","forButton","label","defaultProps","onSubmit","React","memo","schema","yupObject","shape","name","yupString","min","max","required","email","message","actions","resetForm","setSubmitting","renderForm","errors","touched","status","isSubmitting","htmlFor","id","component","initialValues","CONTACT_INIT_STATE","validationSchema"],"mappings":"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","file":"static/js/9.6b5c6bb7.chunk.js","sourcesContent":["/**\n * Functions that trigger async requests, usually agains an external resource like an API or a Mail Service.\n */\nimport { setExperiences } from \"./misc.actions\";\nimport Axios from \"axios\";\nimport { MAIL_URL } from \"../constants\";\nimport { showToast } from \"./toast.actions\";\n\n/**\n * Loads experiences data from JSON, stores it on Redux.\n * Show toast on error.\n */\nexport const loadExperiences = async () => {\n  const jsonPath = \"./experience.json\";\n  try {\n    const response = await Axios.get(jsonPath);\n    setExperiences(response.data);\n  } catch (error) {\n    console.log(`loadExperiences - error loading ${jsonPath}:`, error);\n    showToast(\"Error loading experiences data, please reload.\", false);\n  }\n};\n\n/**\n * Sends email. Show toast on success/error.\n * @param {Object} values - Form field values\n * @returns {Boolean} TRUE on success\n */\nexport const sendMail = async values => {\n  try {\n    await Axios.post(MAIL_URL, values);\n    showToast(\"Your message was delivered.\", true);\n    return true;\n  } catch (error) {\n    console.log(\"sendMail error:\", error);\n    showToast(\n      \"There was an error sending your message, please try again.\",\n      false\n    );\n    return false;\n  }\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Loader from \"./loader/loader\";\n\n/**\n * Button component.\n * @param {Object} props - Props\n * @returns {Object} button DOM node.\n */\nconst Button = props => {\n  const getMyClasses = () => {\n    const classes = [\"py-2 border rounded px-8\"];\n    if (props.inverse) {\n      classes.push(\"bg-white\");\n      if (props.disabled) {\n        classes.push(\"text-gray-300 border-gray-300 cursor-default\");\n      } else {\n        classes.push(\n          \"text-gray-700 border-gray-500 hover:text-gray-900 hover:border-gray-900 transition-colors transition-500\"\n        );\n      }\n    } else {\n      classes.push(\"text-white\");\n      if (props.disabled) {\n        classes.push(\"border-gray-300 bg-gray-300 cursor-default\");\n      } else {\n        classes.push(\n          \"border-transparent bg-gray-900 hover:text-gray-900 hover:border-gray-900 hover:bg-white transition-colors transition-500\"\n        );\n      }\n    }\n    return classes.join(\" \");\n  };\n\n  return (\n    <button\n      type={props.type}\n      disabled={props.disabled}\n      className={getMyClasses()}\n    >\n      {props.disabled ? <Loader forButton /> : props.label}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  label: PropTypes.string.isRequired, // Label\n  type: PropTypes.string, // 'submit', 'reset', 'button'\n  disabled: PropTypes.bool, // Flag to disable button\n  inverse: PropTypes.bool, // Secondary button colors\n  onSubmit: PropTypes.func // Function executed on button click\n};\n\nButton.defaultProps = {\n  type: \"button\",\n  disabled: false,\n  inverse: false,\n  onSubmit: () => {}\n};\n\nexport default React.memo(Button);\n","import React from \"react\";\nimport { string as yupString, object as yupObject } from \"yup\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport Button from \"../shared/button\";\n\nimport \"./contact.css\";\nimport { sendMail } from \"../redux/async-actions\";\nimport { CONTACT_INIT_STATE } from \"../constants\";\n\n/**\n * Configuration object for Yup schema validator. See:\n * https://github.com/jquense/yup\n */\nconst schema = yupObject().shape({\n  name: yupString()\n    .min(3, \"Too Short!\")\n    .max(100, \"Too Long!\")\n    .required(\"Required\"),\n  email: yupString()\n    .email(\"Invalid email\")\n    .required(\"Required\"),\n  message: yupString()\n    .min(3, \"Too Short!\")\n    .max(1024, \"Too Long!\")\n    .required(\"Required\")\n});\n\n/**\n * Callback executed on Form submit. For details on 'actions' parameter see:\n * https://jaredpalmer.com/formik/docs/api/formik#onsubmit-values-values-formikbag-formikbag-gt-void\n * @param {Object} values - Form field values.\n * @param {Object} actions - Form onSubmit 'FormikBag' {resetForm, setStatus, ...}\n */\nconst onSubmit = async (values, actions) => {\n  const isSuccess = await sendMail(values); // wait async method to send mail\n  if (isSuccess) {\n    actions.resetForm(); // mail sent, reset form\n  } else {\n    actions.setSubmitting(false); // mail failed, turn off Form flag\n  }\n};\n\n/**\n * Formik Form component to render inside HTML form. Receives Formik props,\n * see https://jaredpalmer.com/formik/docs/api/formik\n * DOM node is rendered in a CSS grid.\n * @param {Object} param - Params object received from Formik.\n * @returns {Object} - Form formik object.\n */\nconst renderForm = ({ errors, status, touched, isSubmitting }) => {\n  return (\n    <Form className=\"container-grid w-full pt-10 sm:px-5 md:px-10\">\n      <label\n        htmlFor=\"name\"\n        className={`label label-name ${\n          errors.name && touched.name ? \"text-red-500\" : \"\"\n        }`}\n      >\n        Name *:\n      </label>\n      <Field\n        type=\"text\"\n        name=\"name\"\n        id=\"name\"\n        className={`field-name p-2 rounded border self-stretch ${\n          errors.name && touched.name ? \"border-red-500\" : \"border-gray-500\"\n        } ${isSubmitting ? \"bg-gray-100 text-gray-500\" : \"\"}`}\n        disabled={isSubmitting}\n      />\n      <ErrorMessage\n        name=\"name\"\n        component=\"div\"\n        className=\"error-name font-bold text-xs text-red-500 leading-none\"\n      />\n      <label\n        htmlFor=\"email\"\n        className={`label label-email ${\n          errors.email && touched.email ? \"text-red-500\" : \"\"\n        }`}\n      >\n        Email *:\n      </label>\n      <Field\n        type=\"email\"\n        name=\"email\"\n        id=\"email\"\n        className={`field-email p-2 rounded border self-stretch ${\n          errors.email && touched.email ? \"border-red-500\" : \"border-gray-500\"\n        } ${isSubmitting ? \"bg-gray-100 text-gray-500\" : \"\"}`}\n        disabled={isSubmitting}\n      />\n      <ErrorMessage\n        name=\"email\"\n        component=\"div\"\n        className=\"error-email font-bold text-xs text-red-500 leading-none\"\n      />\n      <label\n        htmlFor=\"message\"\n        className={`label label-message ${\n          errors.message && touched.message ? \"text-red-500\" : \"\"\n        }`}\n      >\n        Message *:\n      </label>\n      <Field\n        component=\"textarea\"\n        name=\"message\"\n        id=\"message\"\n        className={`field-message p-2 rounded border self-stretch ${\n          errors.message && touched.message\n            ? \"border-red-500\"\n            : \"border-gray-500\"\n        } ${isSubmitting ? \"bg-gray-100 text-gray-500\" : \"\"}`}\n        disabled={isSubmitting}\n      />\n      <ErrorMessage\n        name=\"message\"\n        component=\"div\"\n        className=\"error-message font-bold text-xs text-red-500 leading-none\"\n      />\n      <div className=\"buttonbar\">\n        <Button type=\"reset\" inverse disabled={isSubmitting} label=\"Reset\" />\n        <Button type=\"submit\" disabled={isSubmitting} label=\"Submit\" />\n      </div>\n    </Form>\n  );\n};\n\n/**\n * Contact page\n * @returns {Object} - DIV DOM node.\n */\nconst Contact = () => {\n  return (\n    <div>\n      <p>\n        Let's work together! You can always reach me at my mail or sending me a\n        message here:\n      </p>\n      <Formik\n        initialValues={{ ...CONTACT_INIT_STATE }}\n        validationSchema={schema}\n        onSubmit={onSubmit}\n      >\n        {renderForm}\n      </Formik>\n    </div>\n  );\n};\n\nexport default React.memo(Contact);\n"],"sourceRoot":""}