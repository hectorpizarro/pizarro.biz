{"version":3,"sources":["shared/button.js","contact/contact.js"],"names":["Button","props","type","disabled","className","classes","inverse","push","join","getMyClasses","forButton","label","defaultProps","onSubmit","React","memo","schema","yupObject","shape","name","yupString","min","max","required","email","message","renderForm","errors","touched","status","isSubmitting","htmlFor","id","component","dispatch","useDispatch","values","actions","a","sendMail","resetForm","doShowToast","setSubmitting","initialValues","CONTACT_INIT_STATE","validationSchema"],"mappings":"mOASMA,EAAS,SAAAC,GAyBb,OACE,4BACEC,KAAMD,EAAMC,KACZC,SAAUF,EAAME,SAChBC,UA5BiB,WACnB,IAAMC,EAAU,CAAC,4BAoBjB,OAnBIJ,EAAMK,SACRD,EAAQE,KAAK,YACTN,EAAME,SACRE,EAAQE,KAAK,gDAEbF,EAAQE,KACN,8GAIJF,EAAQE,KAAK,cACTN,EAAME,SACRE,EAAQE,KAAK,8CAEbF,EAAQE,KACN,6HAICF,EAAQG,KAAK,KAOPC,IAEVR,EAAME,SAAW,kBAAC,IAAD,CAAQO,WAAS,IAAMT,EAAMU,QAarDX,EAAOY,aAAe,CACpBV,KAAM,SACNC,UAAU,EACVG,SAAS,EACTO,SAAU,cAGGC,UAAMC,KAAKf,G,iCC7CpBgB,EAASC,cAAYC,MAAM,CAC/BC,KAAMC,cACHC,IAAI,EAAG,cACPC,IAAI,IAAK,aACTC,SAAS,YACZC,MAAOJ,cACJI,MAAM,iBACND,SAAS,YACZE,QAASL,cACNC,IAAI,EAAG,cACPC,IAAI,KAAM,aACVC,SAAS,cAURG,EAAa,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,OAAgBC,GAA4B,EAApCC,OAAoC,EAA5BD,SAASE,EAAmB,EAAnBA,aAC7C,OACE,kBAAC,IAAD,CAAM1B,UAAU,gDACd,2BACE2B,QAAQ,OACR3B,UAAS,2BACPuB,EAAOR,MAAQS,EAAQT,KAAO,eAAiB,KAHnD,WAQA,kBAAC,IAAD,CACEjB,KAAK,OACLiB,KAAK,OACLa,GAAG,OACH5B,UAAS,qDACPuB,EAAOR,MAAQS,EAAQT,KAAO,iBAAmB,kBAD1C,YAELW,EAAe,4BAA8B,IACjD3B,SAAU2B,IAEZ,kBAAC,IAAD,CACEX,KAAK,OACLc,UAAU,MACV7B,UAAU,2DAEZ,2BACE2B,QAAQ,QACR3B,UAAS,4BACPuB,EAAOH,OAASI,EAAQJ,MAAQ,eAAiB,KAHrD,YAQA,kBAAC,IAAD,CACEtB,KAAK,QACLiB,KAAK,QACLa,GAAG,QACH5B,UAAS,sDACPuB,EAAOH,OAASI,EAAQJ,MAAQ,iBAAmB,kBAD5C,YAELM,EAAe,4BAA8B,IACjD3B,SAAU2B,IAEZ,kBAAC,IAAD,CACEX,KAAK,QACLc,UAAU,MACV7B,UAAU,4DAEZ,2BACE2B,QAAQ,UACR3B,UAAS,8BACPuB,EAAOF,SAAWG,EAAQH,QAAU,eAAiB,KAHzD,cAQA,kBAAC,IAAD,CACEQ,UAAU,WACVd,KAAK,UACLa,GAAG,UACH5B,UAAS,wDACPuB,EAAOF,SAAWG,EAAQH,QACtB,iBACA,kBAHG,YAILK,EAAe,4BAA8B,IACjD3B,SAAU2B,IAEZ,kBAAC,IAAD,CACEX,KAAK,UACLc,UAAU,MACV7B,UAAU,8DAEZ,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQF,KAAK,QAAQI,SAAO,EAACH,SAAU2B,EAAcnB,MAAM,UAC3D,kBAAC,EAAD,CAAQT,KAAK,SAASC,SAAU2B,EAAcnB,MAAM,cAoD7CG,cAAMC,MA1CL,WACd,IAAMmB,EAAWC,cAQXtB,EAAQ,uCAAG,WAAOuB,EAAQC,GAAf,SAAAC,EAAA,sEACSC,YAASH,GADlB,eAGbC,EAAQG,YACRN,EAASO,YAAY,+BAA+B,MAEpDJ,EAAQK,eAAc,GACtBR,EACEO,YACE,8DACA,KAVS,2CAAH,wDAgBd,OACE,6BACE,oHAIA,kBAAC,IAAD,CACEE,cAAa,eAAOC,KACpBC,iBAAkB7B,EAClBH,SAAUA,GAETa","file":"static/js/9.141b06dc.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Loader from \"./loader/loader\";\n\n/**\n * Button component.\n * @param {Object} props - Props\n * @returns {Object} button DOM node.\n */\nconst Button = props => {\n  const getMyClasses = () => {\n    const classes = [\"py-2 border rounded px-8\"];\n    if (props.inverse) {\n      classes.push(\"bg-white\");\n      if (props.disabled) {\n        classes.push(\"text-gray-300 border-gray-300 cursor-default\");\n      } else {\n        classes.push(\n          \"text-gray-700 border-gray-500 hover:text-gray-900 hover:border-gray-900 transition-colors transition-500\"\n        );\n      }\n    } else {\n      classes.push(\"text-white\");\n      if (props.disabled) {\n        classes.push(\"border-gray-300 bg-gray-300 cursor-default\");\n      } else {\n        classes.push(\n          \"border-transparent bg-gray-900 hover:text-gray-900 hover:border-gray-900 hover:bg-white transition-colors transition-500\"\n        );\n      }\n    }\n    return classes.join(\" \");\n  };\n\n  return (\n    <button\n      type={props.type}\n      disabled={props.disabled}\n      className={getMyClasses()}\n    >\n      {props.disabled ? <Loader forButton /> : props.label}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  label: PropTypes.string.isRequired, // Label\n  type: PropTypes.string, // 'submit', 'reset', 'button'\n  disabled: PropTypes.bool, // Flag to disable button\n  inverse: PropTypes.bool, // Secondary button colors\n  onSubmit: PropTypes.func // Function executed on button click\n};\n\nButton.defaultProps = {\n  type: \"button\",\n  disabled: false,\n  inverse: false,\n  onSubmit: () => {}\n};\n\nexport default React.memo(Button);\n","import React from \"react\";\nimport { string as yupString, object as yupObject } from \"yup\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport { useDispatch } from \"react-redux\";\n\nimport Button from \"../shared/button\";\nimport \"./contact.css\";\nimport { CONTACT_INIT_STATE } from \"../constants\";\nimport { sendMail } from \"../app-service\";\nimport { doShowToast } from \"../shared/toast/ducks\";\n\n/**\n * Configuration object for Yup schema validator. See:\n * https://github.com/jquense/yup\n */\nconst schema = yupObject().shape({\n  name: yupString()\n    .min(3, \"Too Short!\")\n    .max(100, \"Too Long!\")\n    .required(\"Required\"),\n  email: yupString()\n    .email(\"Invalid email\")\n    .required(\"Required\"),\n  message: yupString()\n    .min(3, \"Too Short!\")\n    .max(1024, \"Too Long!\")\n    .required(\"Required\")\n});\n\n/**\n * Formik Form component to render inside HTML form. Receives Formik props,\n * see https://jaredpalmer.com/formik/docs/api/formik\n * DOM node is rendered in a CSS grid.\n * @param {Object} param - Params object received from Formik.\n * @returns {Object} - Form formik object.\n */\nconst renderForm = ({ errors, status, touched, isSubmitting }) => {\n  return (\n    <Form className=\"container-grid w-full pt-10 sm:px-5 md:px-10\">\n      <label\n        htmlFor=\"name\"\n        className={`label label-name ${\n          errors.name && touched.name ? \"text-red-500\" : \"\"\n        }`}\n      >\n        Name *:\n      </label>\n      <Field\n        type=\"text\"\n        name=\"name\"\n        id=\"name\"\n        className={`field-name p-2 rounded border self-stretch ${\n          errors.name && touched.name ? \"border-red-500\" : \"border-gray-500\"\n        } ${isSubmitting ? \"bg-gray-100 text-gray-500\" : \"\"}`}\n        disabled={isSubmitting}\n      />\n      <ErrorMessage\n        name=\"name\"\n        component=\"div\"\n        className=\"error-name font-bold text-xs text-red-500 leading-none\"\n      />\n      <label\n        htmlFor=\"email\"\n        className={`label label-email ${\n          errors.email && touched.email ? \"text-red-500\" : \"\"\n        }`}\n      >\n        Email *:\n      </label>\n      <Field\n        type=\"email\"\n        name=\"email\"\n        id=\"email\"\n        className={`field-email p-2 rounded border self-stretch ${\n          errors.email && touched.email ? \"border-red-500\" : \"border-gray-500\"\n        } ${isSubmitting ? \"bg-gray-100 text-gray-500\" : \"\"}`}\n        disabled={isSubmitting}\n      />\n      <ErrorMessage\n        name=\"email\"\n        component=\"div\"\n        className=\"error-email font-bold text-xs text-red-500 leading-none\"\n      />\n      <label\n        htmlFor=\"message\"\n        className={`label label-message ${\n          errors.message && touched.message ? \"text-red-500\" : \"\"\n        }`}\n      >\n        Message *:\n      </label>\n      <Field\n        component=\"textarea\"\n        name=\"message\"\n        id=\"message\"\n        className={`field-message p-2 rounded border self-stretch ${\n          errors.message && touched.message\n            ? \"border-red-500\"\n            : \"border-gray-500\"\n        } ${isSubmitting ? \"bg-gray-100 text-gray-500\" : \"\"}`}\n        disabled={isSubmitting}\n      />\n      <ErrorMessage\n        name=\"message\"\n        component=\"div\"\n        className=\"error-message font-bold text-xs text-red-500 leading-none\"\n      />\n      <div className=\"buttonbar\">\n        <Button type=\"reset\" inverse disabled={isSubmitting} label=\"Reset\" />\n        <Button type=\"submit\" disabled={isSubmitting} label=\"Submit\" />\n      </div>\n    </Form>\n  );\n};\n\n/**\n * Contact page\n * @returns {Object} - DIV DOM node.\n */\nconst Contact = () => {\n  const dispatch = useDispatch();\n\n  /**\n   * Callback executed on Form submit. For details on 'actions' parameter see:\n   * https://jaredpalmer.com/formik/docs/api/formik#onsubmit-values-values-formikbag-formikbag-gt-void\n   * @param {Object} values - Form field values.\n   * @param {Object} actions - Form onSubmit 'FormikBag' {resetForm, setStatus, ...}\n   */\n  const onSubmit = async (values, actions) => {\n    const isSuccess = await sendMail(values); // wait async method to send mail\n    if (isSuccess) {\n      actions.resetForm(); // mail sent, reset form\n      dispatch(doShowToast(\"Your message was delivered.\", true));\n    } else {\n      actions.setSubmitting(false); // mail failed, turn off Form flag\n      dispatch(\n        doShowToast(\n          \"There was an error sending your message, please try again.\",\n          false\n        )\n      );\n    }\n  };\n\n  return (\n    <div>\n      <p>\n        Let's work together! You can always reach me at my mail or sending me a\n        message here:\n      </p>\n      <Formik\n        initialValues={{ ...CONTACT_INIT_STATE }}\n        validationSchema={schema}\n        onSubmit={onSubmit}\n      >\n        {renderForm}\n      </Formik>\n    </div>\n  );\n};\n\nexport default React.memo(Contact);\n"],"sourceRoot":""}